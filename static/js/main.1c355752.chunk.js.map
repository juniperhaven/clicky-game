{"version":3,"sources":["logo.svg","components/Card/index.js","components/Score/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PuppyCard","props","className","src","image","alt","id","onClick","shuffleCards","Score","total","hs","status","Wrapper","children","App","clicked","state","console","log","includes","highScore","score","setState","gameStatus","push","length","i","puppies","j","Math","floor","random","this","map","puppy","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+pBAAAA,EAAOC,QAAU,IAA0B,kC,6MCc5BC,MARf,SAAmBC,GACf,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAKF,EAAMG,MAAOC,IAAM,eAAeC,GAAIL,EAAMK,GAAIC,QAAS,kBAAMN,EAAMO,aAAaP,EAAMK,KAAKJ,UAAU,oB,MCK9GO,MAXf,SAAeR,GACX,OACI,yBAAKC,UAAU,SACX,wBAAIA,UAAU,gBAAd,eAA0CD,EAAMS,OAChD,wBAAIR,UAAU,cAAd,eAAwCD,EAAMU,IAC9C,wBAAIT,UAAU,QAAd,gBACA,wBAAIA,UAAU,UAAUD,EAAMW,U,MCE3BC,MARf,SAAiBZ,GACb,OACI,yBAAKC,UAAU,WACVD,EAAMa,W,OCmGJC,E,YAhGX,WAAYd,GAAQ,IAAD,8BACf,4CAAMA,KAWVO,aAAe,SAAAF,GACX,IAAIU,EAAU,EAAKC,MAAMD,QAMzB,GAJAE,QAAQC,IAAIH,GAITA,EAAQI,SAASd,GACb,EAAKW,MAAMI,UAAY,EAAKJ,MAAMK,MACjC,EAAKC,SAAS,CAACP,QAAS,GACpBK,UAAW,EAAKJ,MAAMK,MACtBE,WAAY,oDAIhB,EAAKD,SAAS,CAACP,QAAS,GACpBQ,WAAY,oDAIpBN,QAAQC,IAAI,kBAUZ,GAPAH,EAAQS,KAAKnB,GAOS,IAAnBU,EAAQU,OACP,EAAKH,SAAS,CAACP,QAAS,GACpBM,MAAO,EACPD,UAAW,EACXG,WAAY,yDAGhBN,QAAQC,IAAI,gBAEX,CAGD,EAAKI,SAAS,CAACD,MAAON,EAAQU,OAC1BF,WAAY,KAMhB,IAAI,IAAIG,EAAIC,EAAQF,OAAO,EAAGC,EAAI,EAAGA,IAAK,CACtC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAE,IADA,EAGX,CAACC,EAAQC,GAAID,EAAQD,IAA/CC,EAAQD,GAH6B,KAGzBC,EAAQC,GAHiB,QA3DlD,EAAKZ,MAAQ,CAACW,UACVZ,QAAS,GACTM,MAAO,EACPD,UAAW,EACXG,WAAY,IAND,E,sEAsET,IAAD,OACL,OACI,yBAAKtB,UAAU,OACX,4BAAQA,UAAU,cAAlB,0BAC2B,6BACvB,yBAAKA,UAAU,SACX,qCACA,iFACA,iIACA,kGAGR,kBAAC,EAAD,CAAOQ,MAASuB,KAAKhB,MAAMK,MACvBX,GAAMsB,KAAKhB,MAAMI,UACjBT,OAAUqB,KAAKhB,MAAMO,aAEzB,kBAAC,EAAD,KACKS,KAAKhB,MAAMW,QAAQM,KAAI,SAAAC,GAAK,OACzB,kBAAC,EAAD,CAAW3B,aAAc,EAAKA,aAAcJ,MAAO+B,EAAM/B,MAAOE,GAAI6B,EAAM7B,GAAI8B,IAAKD,EAAM7B,c,GAzF/F+B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1c355752.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./card.css\";\n\n// so I ended up not being able to load the images from local files\n// but I left the files in the program in case the links ever stop working or something\n\nfunction PuppyCard(props) {\n    return(\n        <div className=\"card-container\">\n            <img src={props.image} alt = \"image of dog\" id={props.id} onClick={() => props.shuffleCards(props.id)} className=\"shuffle-cards\"></img>\n        </div>\n    );\n}\n\nexport default PuppyCard;","import React from \"react\";\nimport \"./score.css\";\n\nfunction Score(props) {\n    return(\n        <div className=\"score\">\n            <h2 className=\"score-header\">Your Score: {props.total}</h2>\n            <h2 className=\"high-score\">High Score: {props.hs}</h2>\n            <h2 className=\"goal\">Your Goal: 9</h2>\n            <h2 className=\"status\">{props.status}</h2>\n        </div>\n    );\n}\n\nexport default Score;","import React from \"react\";\nimport \"./wrapper.css\";\n\nfunction Wrapper(props) {\n    return(\n        <div className=\"wrapper\">\n            {props.children}\n        </div>\n    );\n}\n\nexport default Wrapper;","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PuppyCard from \"./components/Card\";\nimport Score from \"./components/Score\";\nimport Wrapper from \"./components/Wrapper\";\nimport puppies from \"./puppies.json\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {puppies,\n            clicked: [],\n            score: 0,\n            highScore: 0,\n            gameStatus: \"\"\n        };\n    }\n\n    // the card shuffling function thingy\n    // it also checks to see if you've won or lost or neither yet\n    shuffleCards = id => {\n        let clicked = this.state.clicked;\n\n        console.log(clicked);\n\n        // if the clicked array includes the id of the dog you just clicked, you lost\n        // score is reset to 0, game status is set to the message for losing, and the clicked array is reset to empty\n        if(clicked.includes(id)) {\n            if(this.state.highScore > this.state.score) {\n                this.setState({clicked: [],\n                    highScore: this.state.score,\n                    gameStatus: \"Game over! You lost. Click a dog to play again!\"\n                });\n            }\n            else {\n                this.setState({clicked: [],\n                    gameStatus: \"Game over! You lost. Click a dog to play again!\"\n                });\n            }\n\n            console.log(\"You lost.\");\n        }\n        else { // if the dog id you clicked ISN'T in the array, it gets pushed to the array\n            clicked.push(id);\n\n            // checks if the array length is 9, because if it is you've won\n            // clicked is reset to empty, score is set to 9, and the game status is set to the win message\n            // I changed the win message a little after putting the pictures in the readme\n            // so the readme pictures aren't entirely accurate\n            // but I'm not good at memory games like this so the picture stays inaccurate\n            if(clicked.length === 9) {\n                this.setState({clicked: [],\n                    score: 9,\n                    highScore: 9,\n                    gameStatus: \"Congratulations! You win! Click a dog to play again.\"\n                });\n\n                console.log(\"You won!\");\n            }\n            else { // if you haven't won yet, the score is set to the length of the array and the game status is empty\n                // I empties the status here because that way, once you click on a dog card to start a new game after a win or loss\n                // the game status message on the screen goes away\n                this.setState({score: clicked.length,\n                    gameStatus: \"\"\n                });\n\n                // and here, finally\n                // we handle the rearranging of the placement of the dog cards\n                // because if you have neither won nor lost, it's time for that!\n                for(let i = puppies.length-1; i > 0; i--) {\n                    let j = Math.floor(Math.random() * (i+1));\n\n                    [puppies[i], puppies[j]] = [puppies[j], puppies[i]];\n                }\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    Dog Clicker Memory Game<br></br>\n                    <div className=\"rules\">\n                        <b>Rules:</b>\n                        <p>1. The goal is to click all 9 images on the screen</p>\n                        <p>2. You can only click each image one time during a game; if you click the same one twice, you lose</p>\n                        <p>3. Each time you click on a dog, all the dog cards will rearrange</p>\n                    </div>\n                </header>\n                <Score total = {this.state.score}\n                    hs = {this.state.highScore}\n                    status = {this.state.gameStatus}>\n                </Score>\n                <Wrapper>\n                    {this.state.puppies.map(puppy => (\n                        <PuppyCard shuffleCards={this.shuffleCards} image={puppy.image} id={puppy.id} key={puppy.id}></PuppyCard>\n                    ))}\n                </Wrapper>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}